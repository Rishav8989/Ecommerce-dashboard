// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package products

import (
	"context"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    product_category_name, product_name_length,
    product_description_length, product_photos_qty, product_weight_g,
    product_length_cm, product_height_cm, product_width_cm
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateProductParams struct {
	ProductCategoryName      string
	ProductNameLength        int64
	ProductDescriptionLength int64
	ProductPhotosQty         int64
	ProductWeightG           int64
	ProductLengthCm          int64
	ProductHeightCm          int64
	ProductWidthCm           int64
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ProductCategoryName,
		arg.ProductNameLength,
		arg.ProductDescriptionLength,
		arg.ProductPhotosQty,
		arg.ProductWeightG,
		arg.ProductLengthCm,
		arg.ProductHeightCm,
		arg.ProductWidthCm,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE product_id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, productID interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, product_category_name, product_name_length, product_description_length, product_photos_qty, product_weight_g, product_length_cm, product_height_cm, product_width_cm FROM products WHERE product_id = ?
`

func (q *Queries) GetProduct(ctx context.Context, productID interface{}) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductCategoryName,
		&i.ProductNameLength,
		&i.ProductDescriptionLength,
		&i.ProductPhotosQty,
		&i.ProductWeightG,
		&i.ProductLengthCm,
		&i.ProductHeightCm,
		&i.ProductWidthCm,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT product_id, product_category_name, product_name_length, product_description_length, product_photos_qty, product_weight_g, product_length_cm, product_height_cm, product_width_cm FROM products
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductCategoryName,
			&i.ProductNameLength,
			&i.ProductDescriptionLength,
			&i.ProductPhotosQty,
			&i.ProductWeightG,
			&i.ProductLengthCm,
			&i.ProductHeightCm,
			&i.ProductWidthCm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products SET
    product_category_name = ?, product_name_length = ?, product_description_length = ?,
    product_photos_qty = ?, product_weight_g = ?, product_length_cm = ?, product_height_cm = ?,
    product_width_cm = ?
WHERE product_id = ?
`

type UpdateProductParams struct {
	ProductCategoryName      string
	ProductNameLength        int64
	ProductDescriptionLength int64
	ProductPhotosQty         int64
	ProductWeightG           int64
	ProductLengthCm          int64
	ProductHeightCm          int64
	ProductWidthCm           int64
	ProductID                interface{}
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ProductCategoryName,
		arg.ProductNameLength,
		arg.ProductDescriptionLength,
		arg.ProductPhotosQty,
		arg.ProductWeightG,
		arg.ProductLengthCm,
		arg.ProductHeightCm,
		arg.ProductWidthCm,
		arg.ProductID,
	)
	return err
}
