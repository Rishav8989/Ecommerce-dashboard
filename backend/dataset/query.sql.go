// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package dataset

import (
	"context"
	"database/sql"
)

const searchCustomerByUniqueID = `-- name: SearchCustomerByUniqueID :one
SELECT customer_id, customer_unique_id, customer_zip_code_prefix, customer_city, customer_state FROM customers WHERE customer_unique_id = ?
`

func (q *Queries) SearchCustomerByUniqueID(ctx context.Context, customerUniqueID sql.NullString) (Customer, error) {
	row := q.db.QueryRowContext(ctx, searchCustomerByUniqueID, customerUniqueID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerUniqueID,
		&i.CustomerZipCodePrefix,
		&i.CustomerCity,
		&i.CustomerState,
	)
	return i, err
}

const searchLeadsClosedBySellerID = `-- name: SearchLeadsClosedBySellerID :many
SELECT mql_id, seller_id, sdr_id, sr_id, won_date, business_segment, lead_type, lead_behaviour_profile, has_company, has_gtin, average_stock, business_type, declared_product_catalog_size, declared_monthly_revenue FROM leads_closed WHERE seller_id = ?
`

func (q *Queries) SearchLeadsClosedBySellerID(ctx context.Context, sellerID sql.NullString) ([]LeadsClosed, error) {
	rows, err := q.db.QueryContext(ctx, searchLeadsClosedBySellerID, sellerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeadsClosed
	for rows.Next() {
		var i LeadsClosed
		if err := rows.Scan(
			&i.MqlID,
			&i.SellerID,
			&i.SdrID,
			&i.SrID,
			&i.WonDate,
			&i.BusinessSegment,
			&i.LeadType,
			&i.LeadBehaviourProfile,
			&i.HasCompany,
			&i.HasGtin,
			&i.AverageStock,
			&i.BusinessType,
			&i.DeclaredProductCatalogSize,
			&i.DeclaredMonthlyRevenue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchLeadsQualifiedByLandingPageID = `-- name: SearchLeadsQualifiedByLandingPageID :many
SELECT mql_id, first_contact_date, landing_page_id, origin FROM leads_qualified WHERE landing_page_id = ?
`

func (q *Queries) SearchLeadsQualifiedByLandingPageID(ctx context.Context, landingPageID sql.NullString) ([]LeadsQualified, error) {
	rows, err := q.db.QueryContext(ctx, searchLeadsQualifiedByLandingPageID, landingPageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeadsQualified
	for rows.Next() {
		var i LeadsQualified
		if err := rows.Scan(
			&i.MqlID,
			&i.FirstContactDate,
			&i.LandingPageID,
			&i.Origin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchOrderItemsByOrderID = `-- name: SearchOrderItemsByOrderID :many
SELECT order_id, order_item_id, product_id, seller_id, shipping_limit_date, price, freight_value FROM order_items WHERE order_id = ?
`

func (q *Queries) SearchOrderItemsByOrderID(ctx context.Context, orderID sql.NullString) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, searchOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderItemID,
			&i.ProductID,
			&i.SellerID,
			&i.ShippingLimitDate,
			&i.Price,
			&i.FreightValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchOrdersByCustomerID = `-- name: SearchOrdersByCustomerID :many
SELECT order_id, customer_id, order_status, order_purchase_timestamp, order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, order_estimated_delivery_date FROM orders WHERE customer_id = ?
`

func (q *Queries) SearchOrdersByCustomerID(ctx context.Context, customerID sql.NullString) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, searchOrdersByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.OrderStatus,
			&i.OrderPurchaseTimestamp,
			&i.OrderApprovedAt,
			&i.OrderDeliveredCarrierDate,
			&i.OrderDeliveredCustomerDate,
			&i.OrderEstimatedDeliveryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductByID = `-- name: SearchProductByID :one
SELECT product_id, product_category_name, product_name_length, product_description_length, product_photos_qty, product_weight_g, product_length_cm, product_height_cm, product_width_cm FROM products WHERE product_id = ?
`

func (q *Queries) SearchProductByID(ctx context.Context, productID sql.NullString) (Product, error) {
	row := q.db.QueryRowContext(ctx, searchProductByID, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductCategoryName,
		&i.ProductNameLength,
		&i.ProductDescriptionLength,
		&i.ProductPhotosQty,
		&i.ProductWeightG,
		&i.ProductLengthCm,
		&i.ProductHeightCm,
		&i.ProductWidthCm,
	)
	return i, err
}

const searchSellerByID = `-- name: SearchSellerByID :one
SELECT seller_id, seller_zip_code_prefix, seller_city, seller_state FROM sellers WHERE seller_id = ?
`

func (q *Queries) SearchSellerByID(ctx context.Context, sellerID sql.NullString) (Seller, error) {
	row := q.db.QueryRowContext(ctx, searchSellerByID, sellerID)
	var i Seller
	err := row.Scan(
		&i.SellerID,
		&i.SellerZipCodePrefix,
		&i.SellerCity,
		&i.SellerState,
	)
	return i, err
}
